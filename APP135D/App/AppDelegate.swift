import UIKit
import Firebase
import FirebaseMessaging
import AppsFlyerLib
import AppTrackingTransparency


@main
class AppDelegate: UIResponder, UIApplicationDelegate {
    
    var window: UIWindow?
    
    func application(_ application: UIApplication,
                     didFinishLaunchingWithOptions launchOptions: [UIApplication.LaunchOptionsKey: Any]?) -> Bool {
        
        print("üöÄ AppDelegate start")
        FirebaseApp.configure()
        
      
        
         UNUserNotificationCenter.current().delegate = self
         UNUserNotificationCenter.current().requestAuthorization(options: [.alert, .badge, .sound]) { granted, _ in
         print("üîî Push permission: \(granted)")
             DispatchQueue.main.async {
                 UIApplication.shared.registerForRemoteNotifications()
                 
                 DispatchQueue.main.asyncAfter(deadline: .now() + 0.5) {
                     self.requestTrackingAuthorization()
                       }
             }
         }
         Messaging.messaging().delegate = TokenStore.shared
         
        
        TokenStore.shared.start()
        Messaging.messaging().delegate = self
        UNUserNotificationCenter.current().delegate = self
        print("‚úÖ Firebase configured")
        
        
        AppsFlyerLib.shared().appsFlyerDevKey = "P8Cmc5f5JjkNjQ3haoGbWS"
        AppsFlyerLib.shared().appleAppID     = "6752949405"
        AppsFlyerLib.shared().delegate       = self
       // AppsFlyerLib.shared().isDebug        = true // –ø–æ–∫–∞ —Ç–µ—Å—Ç–∏—Ä—É–µ—à—å
        
       
        
        AppsFlyerLib.shared().start()
        
        // –ì–µ–Ω–µ—Ä–∞—Ü–∏—è UUID + AdServices token
        let uuid = DeviceIDProvider.persistedLowerUUID()
        let att = AdServicesTokenProvider.fetchBase64Token()
        
        // –õ–æ–≥ —Å–µ—Å—Å–∏–∏ –≤ Realtime DB
        FirebaseLogger.logSession(uuid: uuid, attToken: att)
        
        // –ü–µ—Ä–µ–¥–∞–¥–∏–º –∫–æ–Ω—Ç–µ–∫—Å—Ç –≤ StartGateService (—á—Ç–æ–±—ã –ª–æ–≥–∏—Ä–æ–≤–∞—Ç—å –¥–∞–ª—å–Ω–µ–π—à–∏–µ —Å–æ–±—ã—Ç–∏—è)
        StartGateService.shared.configureSession(uuid: uuid, attToken: att)
        
        // –û–∫–Ω–æ –∏ —Å—Ç–∞—Ä—Ç–æ–≤—ã–π VC
        window = UIWindow(frame: UIScreen.main.bounds)
        window?.rootViewController = LaunchViewController()
        window?.makeKeyAndVisible()
        print("‚úÖ UIWindow + LaunchViewController set")

        
        return true
    }
    
    private func requestATTAndStartSDKs() {
        guard #available(iOS 14.5, *) else {
            // –ù–∞ iOS < 14.5 ATT –Ω–µ—Ç ‚Äî –ø—Ä–æ—Å—Ç–æ —Å—Ç–∞—Ä—Ç—É–µ–º SDK
            startSDKsWithCurrentPrivacyState()
            return
        }

        ATTrackingManager.requestTrackingAuthorization { status in
            // status: .authorized / .denied / .notDetermined / .restricted
            DispatchQueue.main.async {
                self.startSDKsWithCurrentPrivacyState()
            }
        }
    }

    private func startSDKsWithCurrentPrivacyState() {
        if #available(iOS 14.5, *) {
            let status = ATTrackingManager.trackingAuthorizationStatus
            switch status {
            case .authorized:
              print("auth")
            default:
                print("default")
            }
        }

        // –¢–µ–ø–µ—Ä—å –º–æ–∂–Ω–æ —Å—Ç–∞—Ä—Ç–æ–≤–∞—Ç—å SDK
        AppsFlyerLib.shared().start()
        // –æ—Å—Ç–∞–ª—å–Ω–æ–π –≤–∞—à —Å—Ç–∞—Ä—Ç (Firebase Analytics –º–æ–∂–Ω–æ –æ—Å—Ç–∞–≤–∏—Ç—å ‚Äî –æ–Ω –Ω–µ —Ç—Ä–µ–±—É–µ—Ç ATT –¥–ª—è –±–∞–∑–æ–≤–æ–π –∞–Ω–∞–ª–∏—Ç–∏–∫–∏)
    }
    
    private func requestTrackingAuthorization() {
            if #available(iOS 14, *) {
                ATTrackingManager.requestTrackingAuthorization { status in
                    switch status {
                    case .authorized:
                        print("123 ‚úÖ Tracking —Ä–∞–∑—Ä–µ—à—ë–Ω")
                    case .denied:
                        print("13 ‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –æ—Ç–∫–∞–∑–∞–ª")
                    case .restricted:
                        print("123 ‚ö†Ô∏è –û–≥—Ä–∞–Ω–∏—á–µ–Ω–æ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏")
                    case .notDetermined:
                        print("123 ‚åõ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –µ—â—ë –Ω–µ —Å–¥–µ–ª–∞–ª –≤—ã–±–æ—Ä")
                    @unknown default:
                        break
                    }
                }
            } else {
                // –ù–∞ iOS –Ω–∏–∂–µ 14 ATT –Ω–µ —Ç—Ä–µ–±—É–µ—Ç—Å—è
                print("123 ATT –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω, –º–æ–∂–Ω–æ —Å—Ä–∞–∑—É –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å IDFA")
            }
        }
    
    func application(_ application: UIApplication,
                     supportedInterfaceOrientationsFor window: UIWindow?) -> UIInterfaceOrientationMask {
        let m = OrientationManager.shared.mask
        print("üß≠ supportedInterfaceOrientations ‚Üí \(m)")
        return m
    }
    
    func application(_ application: UIApplication,
                     didRegisterForRemoteNotificationsWithDeviceToken deviceToken: Data) {
        Messaging.messaging().apnsToken = deviceToken
        print("‚úÖ APNs token set for FirebaseMessaging")
    }
    
}

final class OrientationManager {
    static let shared = OrientationManager()
    private init() {}
    
    var mask: UIInterfaceOrientationMask = .all
}

extension AppDelegate: MessagingDelegate, UNUserNotificationCenterDelegate {
    func messaging(_ messaging: Messaging, didReceiveRegistrationToken fcmToken: String?) {
        print("‚úÖ FCM token: \(fcmToken ?? "nil")")
        // –æ—Ç–ø—Ä–∞–≤—å –Ω–∞ —Å–≤–æ–π backend –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
    }
}

extension AppDelegate: AppsFlyerLibDelegate {
    func onConversionDataSuccess(_ conversionInfo: [AnyHashable : Any]) {
        print("‚úÖ AppsFlyer conversion data: \(conversionInfo)")
    }
    func onConversionDataFail(_ error: Error) {
        print("‚ùå AppsFlyer conversion error: \(error.localizedDescription)")
    }
}
